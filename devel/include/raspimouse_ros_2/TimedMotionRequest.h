// Generated by gencpp from file raspimouse_ros_2/TimedMotionRequest.msg
// DO NOT EDIT!


#ifndef RASPIMOUSE_ROS_2_MESSAGE_TIMEDMOTIONREQUEST_H
#define RASPIMOUSE_ROS_2_MESSAGE_TIMEDMOTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raspimouse_ros_2
{
template <class ContainerAllocator>
struct TimedMotionRequest_
{
  typedef TimedMotionRequest_<ContainerAllocator> Type;

  TimedMotionRequest_()
    : left_hz(0)
    , right_hz(0)
    , duration_ms(0)  {
    }
  TimedMotionRequest_(const ContainerAllocator& _alloc)
    : left_hz(0)
    , right_hz(0)
    , duration_ms(0)  {
  (void)_alloc;
    }



   typedef int16_t _left_hz_type;
  _left_hz_type left_hz;

   typedef int16_t _right_hz_type;
  _right_hz_type right_hz;

   typedef uint32_t _duration_ms_type;
  _duration_ms_type duration_ms;





  typedef boost::shared_ptr< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TimedMotionRequest_

typedef ::raspimouse_ros_2::TimedMotionRequest_<std::allocator<void> > TimedMotionRequest;

typedef boost::shared_ptr< ::raspimouse_ros_2::TimedMotionRequest > TimedMotionRequestPtr;
typedef boost::shared_ptr< ::raspimouse_ros_2::TimedMotionRequest const> TimedMotionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace raspimouse_ros_2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'raspimouse_ros_2': ['/home/ubuntu/catkin_ws/src/raspimouse_ros_2/msg', '/home/ubuntu/catkin_ws/devel/share/raspimouse_ros_2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d70b1c52f947559f961bed5aa1647139";
  }

  static const char* value(const ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd70b1c52f947559fULL;
  static const uint64_t static_value2 = 0x961bed5aa1647139ULL;
};

template<class ContainerAllocator>
struct DataType< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raspimouse_ros_2/TimedMotionRequest";
  }

  static const char* value(const ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 left_hz\n\
int16 right_hz\n\
uint32 duration_ms\n\
";
  }

  static const char* value(const ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_hz);
      stream.next(m.right_hz);
      stream.next(m.duration_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimedMotionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raspimouse_ros_2::TimedMotionRequest_<ContainerAllocator>& v)
  {
    s << indent << "left_hz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_hz);
    s << indent << "right_hz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_hz);
    s << indent << "duration_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.duration_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RASPIMOUSE_ROS_2_MESSAGE_TIMEDMOTIONREQUEST_H
